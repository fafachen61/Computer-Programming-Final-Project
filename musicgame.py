import pygame
from pygame.locals import *
import math
import copy
import random
import time
import menu

screenWidth=1000
screenHeight=600
screen = pygame.display.set_mode((screenWidth, screenHeight),0, 32)
bg=pygame.image.load('game_background.jpg')
pygame.display.set_caption('PyBeat')



arcskin=[[pygame.image.load(f'notesimage/note{i}0.png'), pygame.image.load(f'notesimage/pressnote{i}.png')] for i in range(5)]
flyarcskin=[[pygame.image.load(f'notesimage/note{i}{j}.png') for j in range(10)] for i in range(5)]

arcsCenter=pygame.math.Vector2(screenWidth/2,screenHeight)         #center of arcs in vector
radius=194                                                         #radius of arcs
arcsCenter=pygame.math.Vector2(screenWidth/2-radius,screenHeight-radius)       #center of arcs in vector
color1=(50,100,200)
color2=(200,100,50)
color=color1

score=0

clock=pygame.time.Clock()
flyExtend=700
pygame.init()
font = pygame.font.Font("msjh.ttc", 24)

def show_text(text, x, y):
    x = x
    y = y
    text = font.render(text, True, (255, 255, 255))
    screen.blit(text, (x, y))

class arc:
    def __init__(self,num,radius,pos):
        self.num=num
        self.r=radius
        self.center=pos
        self.angle=num*36+18
        self.mode=0
        self.skins=arcskin[num]
    def draw(self,surface):
        surface.blit(self.skins[self.mode],self.center)
        

class flyarc(arc):
    def __init__(self,arc0):
        self.r=arc0.r
        self.angle=arc0.angle
        self.direct=pygame.Vector2()
        self.direct.from_polar((1,self.angle))
        self.direct.y*=-1                                          #y-direction is negative
        self.skins=flyarcskin[arc0.num]
        self.center=arc0.center+flyExtend*self.direct              #extend the position of arc
        self.origin=copy.deepcopy(self.center)                     #record original position
        self.counter=0
        self.condition='fine'
    def fly(self,ds):
        self.center-=self.direct*ds*500                               #move the flying arc in its own direction
    def next(self):
        self.counter+=1
    def draw(self,surface):
        surface.blit(self.skins[self.counter],self.center)

def hit(self,score):
    if self.condition=='hit':
        pass
    elif self.condition=='fine':
        if abs((self.center-self.origin).magnitude()-flyExtend)<30:
            self.condition='hit'
            score+=10
            if abs((self.center-self.origin).magnitude()-flyExtend)<10:
                score+=10
            if abs((self.center-self.origin).magnitude()-flyExtend)<5:
                score+=10
              
            
    return score
            
        

def redrawGameWindow(score,flyarcs):
    screen.blit(bg,(0,0))
    for arc in arcs:
        arc.draw(screen)
    for flyarc in flyarcs:
        flyarc.draw(screen)
    show_text(f'Score:{score}',screenWidth/2-45,screenHeight-70)
    show_text('PAUSE',screenWidth-90,0)
    pygame.display.update()


class sheet:
    def __init__(self, timelist, farcs):
        self.timelist=timelist
        self.farcs=farcs
    def detect(self, currentTime,d=0):
        try:
            
            if self.timelist[0]+d<currentTime:
                
                num=random.randint(0,5)
                self.farcs.append(flyarc(arcs[2]))
                self.timelist.pop(0)
        except:
            pass

                

winter_tears=[42, 262, 552, 899, 1243, 1560, 1743, 2224, 2573, 3268, 3560, 3736, 4284, 4437, 4598, 5271, 5443, 5611, 5818, 5971, 6429, 6927, 7234, 7749, 8246, 8397, 8598, 9098, 9590, 9757, 9945, 10579, 10946, 11265, 11597, 11923, 12231, 12384, 12862, 13256, 13941, 14267, 14450, 14928, 15275, 15944, 16151, 16317, 16484, 16642, 17136, 17618, 17910, 18375, 18882, 19232, 20262, 20574, 21873, 22050, 22407, 22891, 23224, 23410, 23738, 24272, 24591, 24787, 25119, 25595, 25911, 26098, 26435, 26954, 27253, 27435, 27782, 28274, 28595, 28769, 29106, 29614, 29936, 30135, 30446, 30905, 31227, 31419, 31760, 32240, 32552, 32734, 33077, 33605, 33914, 34101, 34438, 34925, 35273, 35444, 35756, 36265, 36578, 36750, 37086, 37614, 37926, 38103, 38432, 38923, 39277, 39454, 39771, 40291, 40608, 40774, 41096, 41606, 41944, 42124, 42468, 42965, 43286, 43897, 44454, 45255, 45577, 45758, 48313, 48519, 48701, 49256, 49778, 50851, 51248, 51896, 52371, 53572, 53952, 54611, 55264, 55878, 56286, 56453, 58894, 59069, 59253, 59955, 60461, 60953, 61266, 61595, 61802, 64573, 65559, 65900, 66827, 67018, 67250, 67761, 68285, 68576, 69260, 69922, 70947, 71283, 71949, 72262, 72443, 74889, 75081, 75288, 76229, 76591, 77588, 77764, 77950, 78845, 79219, 80276, 80458, 80645, 80977, 81294, 81617, 81790, 81966, 82297, 82583, 82923, 83104, 83285, 85846, 87138, 87909, 88611, 88945, 89107, 89348, 89596, 89767, 90312, 90641, 90921, 91304, 91617, 91770, 92301, 92640, 93273, 93439, 93596, 93763, 93950, 94409, 94936, 95258, 95746, 96256, 96631, 97173, 97589, 97772, 97939, 98589, 98939, 99266, 99589, 99897, 100376, 100869, 101251, 101573, 101905, 102255, 102409, 102923, 103290, 103909, 104241, 104610, 105108, 105605, 105949, 106466, 106960, 107269, 108511, 110059, 112756, 112978, 113242, 113588, 113923, 114088, 114400, 114955, 115271, 115449, 115786, 116244, 116562, 116734, 117075, 117600, 117943, 118120, 118441, 118914, 119251, 119423, 119740, 120250, 120572, 120770, 121105, 121603, 121927, 122120, 122471, 122928, 123255, 123423, 123756, 124254, 124583, 124750, 125087, 125615, 125930, 126095, 126427, 126942, 127263, 127445, 127768, 128271, 128562, 128733, 129057, 129590, 129932, 130119, 130431, 130966, 131248, 131430, 131783, 132311, 132609, 132791, 133127, 133652, 133962, 134612, 134771, 135286, 135911, 136243, 136416, 138944, 139141, 139312, 139947, 140497, 141467, 141894, 142530, 142978, 144246, 144583, 145250, 145405, 145849, 146577, 146921, 147102, 149551, 149719, 149909, 150574, 151003, 151617, 151917, 152283, 152458, 155239, 156241, 156532, 157567, 157735, 157921, 158441, 159271, 159453, 159912, 160628, 161573, 161886, 162632, 162890, 163066, 165581, 165742, 165928, 166921, 167215, 168236, 168420, 168613, 169567, 169900, 170836, 171013, 171203, 171576, 171913, 172286, 172446, 172622, 172940, 173269, 173620, 173783, 173952, 176619, 177807, 178602, 179277, 179629, 179787, 179999, 180271, 180424, 180581, 180933, 181282, 181598, 181936, 182249, 182431, 182914, 183272, 183914, 184083, 184237, 184413, 184599, 185104, 185562, 185913, 186421, 186940, 187260, 187763, 188270, 188422, 188583, 189293, 189581, 189927, 190233, 190561, 190913, 191085, 191575, 191912, 192582, 192908, 193068, 193578, 193931, 194610, 194768, 194928, 195098, 195279, 195773, 196285, 196614, 197101, 197259, 197635, 197954, 200776, 201057, 201318, 201606, 201776, 201929, 202355, 202682, 202995, 203298, 203564, 203751, 204244, 204561, 205252, 205418, 205576, 205742, 205922, 206385, 206938, 207267, 207759, 208288, 208600, 209075, 209590, 209742, 209921, 210596, 210900, 211238, 211590, 211932, 212229, 212391, 212886, 213233, 213601, 213913, 214230, 214402, 214899, 215242, 215876, 216042, 216211, 216397, 216579, 217073, 217571, 217940, 218403, 218912, 219245, 221941, 222126, 222449, 222933, 223256, 223426, 223749, 224297, 224579, 224745, 225057, 225559, 225902, 226074, 226397, 226911, 227229, 227403, 227731, 228274, 228617, 228784, 229095, 229631, 229924, 230085, 230417, 230947, 231249, 231432, 231740, 232273, 232580, 232753, 233054, 233568, 233886, 234058, 234406, 234920, 235257, 235427, 235736, 236243, 236576, 236732, 237065, 237593, 237927, 238089, 238364, 238906, 239243, 239430, 239769, 240267, 240589, 240765, 241062, 241601, 241922, 242109, 242466, 242972, 243256, 243447, 243715]
Mirror_night=[1373, 1729, 1902, 2074, 2226, 2401, 2570, 3105, 3275, 3462, 3637, 3817, 4008, 4546, 4717, 4894, 5060, 5226, 5397, 5588, 5745, 5918, 6086, 6271, 6461, 6620, 6784, 7360, 7552, 7720, 7890, 8049, 8237, 8562, 8738, 9103, 9283, 9444, 9627, 10161, 10355, 10513, 10669, 10834, 11041, 11579, 11770, 11939, 12114, 12280, 12467, 13041, 13198, 13371, 13544, 13715, 13871, 14386, 14724, 14920, 15072, 15260, 15800, 16005, 16176, 16362, 16519, 16726, 17236, 17469, 17626, 17781, 17958, 18129, 18662, 18874, 19196, 19377, 20003, 20189, 20381, 20569, 20735, 20933, 23725, 24439, 25115, 25267, 26202, 26379, 26570, 27280, 27602, 27800, 29048, 29217, 29407, 30137, 30751, 31470, 31844, 32009, 34745, 34914, 35071, 35789, 36082, 36258, 37153, 37501, 37663, 38588, 38911, 39099, 40003, 40276, 40447, 41432, 41779, 42033, 42409, 42783, 43166, 43515, 44209, 44542, 44713, 46323, 46661, 47039, 47313, 47588, 47998, 48325, 48834, 49175, 49547, 49787, 50162, 50409, 50817, 50999, 51974, 52353, 52576, 52912, 53210, 53769, 53945, 54429, 54717, 55201, 55368, 55731, 56089, 57598, 57985, 58307, 58766, 58928, 59099, 59452, 59607, 60480, 60838, 61014, 61419, 61721, 62265, 62441, 63327, 63650, 63968, 64144, 64492, 65005, 65369, 65534, 65917, 66492, 66880, 67033, 67204, 67386, 68217, 68876, 69450, 69629, 69819, 69993, 70170, 70350, 70864, 71031, 71237, 71419, 71581, 71773, 72324, 72504, 72662, 72842, 72998, 73151, 73331, 73518, 73669, 73881, 74058, 74229, 74406, 74602, 75148, 75330, 75501, 75652, 75819, 75996, 76325, 76507, 76879, 77087, 77288, 77448, 77948, 78114, 78282, 78474, 78651, 78833, 79347, 79514, 79701, 79858, 80033, 80216, 80829, 80981, 81161, 81361, 81515, 81672, 82186, 82512, 82688, 82867, 83023, 83571, 83768, 83956, 84142, 84295, 84456, 84980, 85168, 85348, 85551, 85728, 85879, 86450, 86632, 86928, 87100, 87804, 87972, 88168, 88350, 88518, 88744, 91493, 91844, 92201, 92565, 92918, 93253, 93638, 93989, 94352, 94714, 95064, 95402, 95769, 96495, 97196, 97543, 97871, 98264, 98621, 98950, 99307, 99665, 100039, 100360, 100702, 101010, 101391, 102091, 102785, 103191, 103535, 103887, 104261, 104549, 104947, 105275, 105603, 105947, 106317, 106682, 107056, 107771, 108454, 108790, 109148, 109507, 109879, 110222, 110574, 110957, 111307, 111648, 112001, 112369, 112708, 114112, 114822, 115488, 116574, 116906, 117265, 117648, 117952, 118355, 119101, 119710, 120434, 121140, 121841, 122555, 123291, 123870, 124023, 124695, 125422, 126129, 126855, 127563, 128176, 128881, 129596, 129804, 129991, 130184, 130370, 130547, 130711, 131054, 132434, 133205, 133840, 135259, 136793, 137041, 137409, 137571, 137898, 138357, 138653, 139212, 139558, 139881, 140199, 140490, 140753, 141290, 141462, 142327, 142671, 143033, 143211, 143427, 143660, 144163, 144315, 144763, 145054, 145559, 145730, 146092, 146355, 147930, 148299, 149082, 149470, 149709, 149885, 150324, 150498, 150670, 150829, 151495, 151807, 152069, 152573, 152744, 153646, 154024, 154367, 154542, 154874, 155384, 155756, 155913, 156302, 156811, 157209, 157373, 157528, 157684, 159278, 159687, 159994, 160166, 160759, 161117, 161302, 162090, 162614, 162851, 163200, 163434, 163994, 164352, 164731, 165088, 165522, 165808, 165982, 166535, 166874, 167121, 167876, 168029, 168243, 168556, 168929, 169161, 169856, 170791, 171526, 171742, 171902, 172090, 172262, 172469, 172958, 173129, 173332, 173522, 173695, 173907, 174448, 174616, 174808, 175017, 175168, 175334, 176814, 177378, 177564, 177735, 177927, 178124, 178341, 178874, 179042, 179227, 179410, 179588, 179768, 180347, 180589, 180851, 181193, 182604, 183197, 183393, 183559, 183722, 183890, 184081, 184626, 184817, 184997, 185150, 185333, 185524, 186049, 186245, 186400, 186551, 186734, 186904, 188307, 188847, 189042, 189205, 189370, 189521, 189726, 190300, 190472, 190653, 190834, 191014, 191180, 191566, 191866, 192199, 192552, 194020, 194539, 194797, 194961, 195114, 195265, 195416, 195938, 196114, 196274, 196447, 196614, 196831, 197370, 197542, 197713, 197875, 198051, 198232, 199612, 200150, 200358, 200523, 200686, 200863, 201056, 201568, 201775, 201962, 202123, 202276, 202488, 203525, 203862, 205296, 205799, 205965, 206145, 206313, 206481, 206694, 207223, 207415, 207617, 207807, 207962, 208118, 208645, 208815, 208982, 209145, 209305, 209511, 210864, 211438, 211619, 211786, 211958, 212129, 212323, 212844, 213007, 213187, 213369, 213538, 213714, 214478, 216566, 216957, 217323, 217636, 217977, 218667, 219382, 219923, 220109, 220290, 220462, 220635, 220801, 221285, 221492, 221682, 221854, 222036, 222232, 225050, 225569, 225771, 225960, 226126, 226277, 226459, 227003, 227192, 227367, 227538, 227705, 227878, 228432, 228609, 228765, 228933, 229100, 229262, 229705, 230021, 230387, 230712, 231333, 231486, 231638, 231792, 231956, 232109, 232443, 232608, 233007, 233170, 233340, 233511, 234050, 234252, 234418, 234581, 234741, 234908, 235424, 235617, 235803, 235974, 236147, 236300, 236452, 236892, 237080, 237239, 237392, 237560, 237727, 238235, 238624, 238801, 238960, 239130, 239629, 239825, 239992, 240186, 240397, 241162, 241348, 241505, 241672, 241840, 242034, 242613, 242791, 242944, 243116, 243274, 243862, 244064, 244223, 244376, 244528, 244681, 244836, 247530, 248906, 249151, 249377, 249671, 249953, 250216, 250919, 251197, 251454, 251701, 251939, 252196, 252922, 253197, 253409, 253692, 253888, 254165, 256213, 257080, 257347, 257605, 257821, 258066, 258272, 259008, 259254, 259487, 259733, 259970, 260198, 260953, 261241, 261482, 261725, 261962, 262226]    

    
    


arcs=[]                                                            #create a list of arcs
for i in range(5):
    arcs.append(arc(i,radius,arcsCenter))
arcs.reverse()
#sample=copy.deepcopy(arcs)




def startrun(song):
    flyarcs=[]
    con=0
    sheet1=sheet(song,flyarcs)
    a=0
    score=0
    run=True
    pause=False
    ct=pygame.time.get_ticks()
    
    delay=ct-850
    pygame.mixer.music.play()
    while run:


        time_passed = clock.tick()
        time_passed_seconds = time_passed / 1000.0
        if con ==1:
            time_passed_seconds=0
            con=0
        keys=pygame.key.get_pressed()               #detect all the key-press and return a dictionary with boolean values
        ct=pygame.time.get_ticks()
        sheet1.detect(ct,delay)

        for event in pygame.event.get():
            if event.type == QUIT:
                a=1
                run=False
            elif event.type==USEREVENT:
                a=2
                run=False
            elif event.type == MOUSEBUTTONDOWN:
                mouse_pos=pygame.mouse.get_pos()
                if screenWidth-90<mouse_pos[0]<screenWidth and 0<mouse_pos[1]<30:
                    pause=True
                    pygame.mixer.music.pause()
                    while pause:
                        
                        show_text('CONTINUE',300,screenHeight/2)
                        show_text('QUIT',600,screenHeight/2)
                        pygame.display.update()
                        for event in pygame.event.get():
                            if event.type == QUIT:
                                a=1
                                run=False
                                pause=False
                            if event.type==MOUSEBUTTONDOWN:
                                mouse_pos=pygame.mouse.get_pos()
                                if 300<mouse_pos[0]<400 and screenHeight/2<mouse_pos[1]<screenHeight/2+30:
                                    con=1
                                    delay-=ct
                                    ct=pygame.time.get_ticks()
                                    delay+=ct
                                    pygame.mixer.music.unpause()
                                    pause=False
                                elif 600<mouse_pos[0]<700 and screenHeight/2<mouse_pos[1]<screenHeight/2+30:
                                    a=2
                                    pygame.mixer.music.stop()
                                    run=False
                                    pause=False

        for arc in arcs:
            arc.mode=0

        for farc in flyarcs:

                
            if (farc.center-farc.origin).magnitude()<flyExtend or farc.condition=='fine':
                farc.fly(time_passed_seconds)
            else:
                if farc.counter<9:
                    farc.next()
                else:
                    flyarcs.pop(flyarcs.index(farc))
            if keys[K_c]:
                if farc.angle==162.0:
                    score=hit(farc,score)
            if keys[K_v]:
                if farc.angle==126.0:
                    score=hit(farc,score)
            if keys[K_b]:
                if farc.angle==90.0:
                    score=hit(farc,score)
            if keys[K_n]:
                if farc.angle==54.0:
                    score=hit(farc,score)
            if keys[K_m]:
                if farc.angle==18.0:
                    score=hit(farc,score)

        if keys[K_c]:
            arcs[0].mode=1
        if keys[K_v]:
            arcs[1].mode=1
        if keys[K_b]:
            arcs[2].mode=1
        if keys[K_n]:
            arcs[3].mode=1
        if keys[K_m]:
            arcs[4].mode=1
            

        redrawGameWindow(score,flyarcs)

    if a==1:
        pygame.quit()
    elif a==2:
        menu.startmenu()

def mugame(song,level):
    if level==1 or level==2:
        pygame.mixer.init()
        pygame.mixer.music.load("winter_tears.mp3")
        pygame.mixer.music.set_endevent(USEREVENT)
        startrun(song)
    elif level==3:
        pygame.mixer.init()
        pygame.mixer.music.load("Mirror_night.mp3")
        pygame.mixer.music.set_endevent(USEREVENT)
        startrun(song)
      

if __name__=='__main__':
    mugame(winter_tears,1)
